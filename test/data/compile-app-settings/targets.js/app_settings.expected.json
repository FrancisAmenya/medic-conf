{
  "contact_summary": "",
  "tasks": {
    "rules": "define Target {_id: null,deleted: null,type: null,pass: null,date: null}define Contact {contact: null,reports: null}define Task {_id: null,deleted: null,doc: null,contact: null,icon: null,date: null,title: null,fields: null,resolved: null,priority: null,priorityLabel: null,reports: null,actions: null}rule GenerateEvents {when {c: Contact}then {var idx1, idx2, r, target;var now = Utils.now();var targets = [{id:\"active-pregnancies\",appliesToType:\"report\",appliesIf:function(c, r) { return r.form === 'D'; },date:\"now\"},{id:\"imm-children-registered-this-month\",appliesToType:\"person\",appliesIf:function(c) { return c.age_in_months <= 60; },date:function(c) { return c.contact.reported_date; }}];var tasks = [];if (c.contact && c.contact.type === 'person') {for(idx1=0; idx1<targets.length; ++idx1) {target = targets[idx1];switch(target.appliesToType) {case 'person':emitPersonBasedTargetFor(c, target);break;case 'report':for(idx2=0; idx2<c.reports.length; ++idx2) {r = c.reports[idx2];emitReportBasedTargetFor(c, r, target);}break;default:throw new Error('unrecognised target type: ' + target.type);}}for(idx1=0; idx1<tasks.length; ++idx1) {for(idx2=0; idx2<c.reports.length; ++idx2) {r = c.reports[idx2];emitTasksForSchedule(c, r, tasks[idx1]);}}}function emitTasksForSchedule(c, r, schedule) {var i;if(schedule.appliesToForms && schedule.appliesToForms.indexOf(r.form) === -1) {return;}if(schedule.appliesIf && !schedule.appliesIf(c, r)) {return;}if(schedule.appliesToScheduledTaskIf) {if(!r.scheduled_tasks) {return;}for (i = 0; i < r.scheduled_tasks.length; i++) {if(schedule.appliesToScheduledTaskIf(r, i)) {emitForEvents(i);}}} else {emitForEvents();}function emitForEvents(scheduledTaskIdx) {var i, dueDate, event, priority, task;for (i = 0; i < schedule.events.length; i++) {event = schedule.events[i];if(event.dueDate) {dueDate = event.dueDate(r, event, scheduledTaskIdx);} else if(scheduledTaskIdx) {dueDate = new Date(Utils.addDate(new Date(r.scheduled_tasks[scheduledTaskIdx].due), event.days));} else {dueDate = new Date(Utils.addDate(new Date(r.reported_date), event.days));}if (!Utils.isTimely(dueDate, event)) {continue;}task = {_id: r._id + '-' + event.id,deleted: !!((c.contact && c.contact.deleted) || r.deleted),doc: c,contact: c.contact,icon: schedule.icon,date: dueDate,title: schedule.title,resolved: schedule.resolvedIf(c, r, event, dueDate),actions: schedule.actions.map(initActions),};if(scheduledTaskIdx) {task._id += '-' + scheduledTaskIdx;}priority = schedule.priority;if(typeof priority === 'function') {priority = priority(c, r);}if(priority) {task.priority = priority.level;task.priorityLabel = priority.label;}emit('task', new Task(task));}}function initActions(def) {return {type: 'report',form: def.form,label: def.label || 'Follow up',content: {source: 'task',source_id: r._id,contact: c.contact,},};}}function emitPersonBasedTargetFor(c, targetConfig) {if(targetConfig.appliesIf && !targetConfig.appliesIf(c)) return;var pass = !targetConfig.passesIf || !!targetConfig.passesIf(c);var instance = createTargetInstance(targetConfig.id, c.contact, pass);instance.date = targetConfig.date ? targetConfig.date(c) : now.getTime(); emitTargetInstance(instance);}function emitReportBasedTargetFor(c, r, targetConf) {var instance, pass;if(targetConf.appliesIf && !targetConf.appliesIf(c, r)) return;if(targetConf.emitCustom) {targetConf.emitCustom(c, r);return;}pass = !targetConf.passesIf || !!targetConf.passesIf(c, r);instance = createTargetInstance(targetConf.id, r, pass);instance._id = (targetConf.idType === 'report' ? r._id : c.contact._id) + '-' + targetConf.id;emitTargetInstance(instance);switch(targetConf.date) {case 'now': instance.date = now.getTime(); break;}}function createTargetInstance(type, doc, pass) {return new Target({_id: doc._id + '-' + type,deleted: !!doc.deleted,type: type,pass: pass,date: doc.reported_date});}function createTargetInstance(type, doc, pass) {return new Target({_id: doc._id + '-' + type,deleted: !!doc.deleted,type: type,pass: pass,date: doc.reported_date});}function emitTargetInstance(i) {emit('target', i);}emit('_complete', { _id: true });}}",
    "schedules": {
      "test": true
    },
    "targets": {
      "enabled": true,
      "items": [
        {
          "id": "active-pregnancies",
          "type": "count",
          "icon": "pregnancy-1",
          "goal": -1,
          "translation_key": "targets.active_pregnancies.title",
          "subtitle_translation_key": "targets.all_time.subtitle"
        },
        {
          "id": "imm-children-registered-this-month",
          "type": "count",
          "icon": "child",
          "goal": -1,
          "translation_key": "targets.children_registered.title",
          "subtitle_translation_key": "targets.this_month.subtitle",
          "context": "user.parent.use_cases.split(' ').indexOf('imm') !== -1"
        }
      ]
    }
  }
}
